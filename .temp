try {
    const userId = req.params.id;
    const existingUserDetails = await userm.findOne({ _id: userId });

    // Check if the current password matches the stored password
    const isCurrentPasswordValid = await bcrypt.compare(req.body.currentPassword, existingUserDetails.password);

    if (!isCurrentPasswordValid) {
        // If the current password is not valid, handle the error or redirect to an error page
        console.log("Current password is incorrect");
        res.redirect("/profile/changePassword"); // You might want to include an error message
        return;
    }

    // Update the password
    const hashedNewPassword = await bcrypt.hash(req.body.newPassword, 10);
    existingUserDetails.password = hashedNewPassword;

    // Save the updated user details to the database
    await existingUserDetails.save();

    console.log("Password updated successfully");
    res.redirect("/profile");
} catch (error) {
    console.log(error);
    res.status(500).json("Internal Server Error");
}




  // const useraddress=await addressm.find({userid:user});
  // const userorders=await orderm.find({userid:user});

  subquantityget: async (req, res) => {
    try {
        const cartItemId = req.params.id;
        const cartItem = await cartm.findById(cartItemId);

        if (cartItem) {
            if (cartItem.quantity > 1) {
                // Subtract the quantity
                cartItem.quantity -= 1;

                // Adjust the total price based on the new quantity
                cartItem.price = (cartItem.price / (cartItem.quantity + 1)) * cartItem.quantity;

                await cartItem.save();
            } else {
                // If the quantity is 1, remove the item
                await cartItem.remove();
            }
            res.redirect("/cart");
        } else {
            res.status(404).json({ message: "Cart Item not found" });
        }
    } catch (error) {
        console.log(error);
        res.status(500).json({ message: "Internal Server Error" });
    }
},



<style>
  body {
      margin: 0;
      padding: 0;
      background: url("/images/bg.jpg") center center fixed;
      background-size: cover;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: 'Arial', sans-serif; 
  }

  .cart-container {
      background-color: rgba(255, 255, 255, 0.9);
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 80%; 
      max-width: 600px; 
  }

  .cart-heading {
      text-align: center;
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 20px;
  }

  .cart-item {
      border-bottom: 1px solid #ddd;
      padding: 10px;
      display: flex;
      justify-content: space-between;
      margin-right: 10px;
      font-weight: bold;
  }

  .item-details {
      width: 70%; 
  }

  .item-actions {
      width: 70%;
      display: flex;
      align-items: center;
      justify-content: space-between;
  }

  .btn-sm {
      margin-right: 5px;
  }

  .cart-total {
      font-weight: bold;
      margin-top: 20px;
      text-align: center; 
  }

  .checkout-btn {
      display: block;
      margin: 20px auto;
  }
  .product-image {
            width: 80px; /* Set the desired width for the product image */
            height: auto; /* Maintain aspect ratio */
            margin-right: 10px;
  }

</style>

<body>

    <div class="cart-container">
        <h2 class="cart-heading">Shopping Cart</h2>
    
        <% if (cartItems.length > 0) { %>
            <div class="cart-items">
                <% let totalPrice = 0; %>
                <% cartItems.forEach(function (item) { %>
                    <div class="cart-item">
                        <div class="item-details">
                            <img src="<%= item.img %>" alt="<%= item.product %>" class="product-image">
                            <h5><%= item.product %></h5>
                            <p>Price: $<span id="price_<%= item._id %>"><%= item.price %></span></p>
                        </div>
                        <div class="item-actions ">
                            <p>Quantity: <span id="quantity_<%= item._id %>"><%= item.quantity %></span></p>
                            <a href="/cart/remove/<%= item._id %>" class="btn btn-danger btn-sm">Remove</a>
                            <a href="javascript:void(0);" onclick="updateQuantity('<%= item._id %>', -1)" class="btn btn-secondary btn-sm">-</a>
                            <a href="javascript:void(0);" onclick="updateQuantity('<%= item._id %>', 1)" class="btn btn-primary btn-sm">+</a>
                        </div>
                    </div>
                    <% totalPrice += item.price * item.quantity; %>
                <% }); %>
            </div>
    
            <div class="cart-total">
                <p>Total Price: $<span id="totalPrice"><%= totalPrice.toFixed(2) %></span></p>
            </div>
        <% } else { %>
            <p>Your cart is empty.</p>
        <% } %>
    
        <a href="/checkout" class="btn btn-primary checkout-btn">Checkout</a>
    </div>
    
    
      
    <script>
        function updateQuantity(itemId, change) {
            var quantityElement = document.getElementById("quantity_" + itemId);
            var priceElement = document.getElementById("price_" + itemId);
            var totalPriceElement = document.getElementById("totalPrice");
            var currentQuantity = parseInt(quantityElement.innerText);
            var newQuantity = currentQuantity + change;
    
            if (newQuantity > 0) {
                // Update quantity in the view
                quantityElement.innerText = newQuantity;
    
                var unitPrice = parseFloat(priceElement.innerText);
    
                // Calculate new price
                var newPrice = (unitPrice * newQuantity).toFixed(2);
                priceElement.innerText = newPrice;
    
                // Update total price in the view
                var currentTotalPrice = parseFloat(totalPriceElement.innerText);
    
                // Calculate new total price
                var newTotalPrice = (currentTotalPrice + unitPrice * change).toFixed(2);
                totalPriceElement.innerText = newTotalPrice;
    
                // Make an AJAX request to update the quantity on the server
                fetch("/cart/updatequantity/" + itemId + "?quantity=" + newQuantity, {
                    method: "PUT",
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Network response was not ok");
                    }
                    return response.json();
                })
                .then(data => {
                    // Handle the response if needed
                })
                .catch(error => console.error("Error:", error));
            }
        }
    </script>


app.get('/cart/addquantity/:id', async (req, res) => {
    const productId = req.params.id;
    const cart = await cartm.findOne({ _id: productId });
    
    // Assuming your cartm model has an array property called cartItems
    const updatedCartItems = cart.cartItems.map(item => {
        if (item._id.toString() === productId) {
            item.quantity++;
        }
        return item;
    });

    cart.save(); // Save the changes

    // Return the updated quantity and the entire cartItems array
    res.json({
        updatedQuantity: cart.cartItems.find(item => item._id.toString() === productId).quantity,
        cartItems: updatedCartItems
    });
});


const inccart = async (req, res) => {
    try {
        const pid = req.params.id;
        const item = await cartcollection.findOne({ _id: pid });
        const newQuantity = item.quantity + 1;
        const newPrice = item.price * newQuantity;

        // Update the quantity in the database
        await cartcollection.updateOne(
            { _id: pid },
            { $set: { quantity: newQuantity } }
        );

        // Calculate the overall total price (sum of prices for all items in the cart)
        const overallTotalPrice = await calculateOverallTotalPrice();

        // Send the response including the newOverallTotalPrice
        res.status(200).json({
            success: true,
            newQuantity,
            newPrice,
            newOverallTotalPrice: overallTotalPrice,
            message: 'Quantity increased successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).send('Internal Server Error');
    }
};

const deccart = async (req, res) => {
    try {
        const pid = req.params.id;
        const item = await cartcollection.findOne({ _id: pid });
        const newQuantity = Math.max(item.quantity - 1, 1);
        const newPrice = item.price * newQuantity;

        // Update the quantity in the database
        await cartcollection.updateOne(
            { _id: pid },
            { $set: { quantity: newQuantity } }
        );

        // Calculate the overall total price (sum of prices for all items in the cart)
        const overallTotalPrice = await calculateOverallTotalPrice();

        // Send the response including the newOverallTotalPrice
        res.status(200).json({
            success: true,
            newQuantity,
            newPrice,
            newOverallTotalPrice: overallTotalPrice,
            message: 'Quantity decreased successfully'
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            success: false,
            message: 'Error decreasing quantity',
            error: error.message
        });
    }
};





// Place Order Get
exports.placeOrder = async (req, res) => {
    let user = req.session.user;
  
      let userName = user.username;
      let userId = user.user_id;
      const cart = await Cart.find({ userid: userId });
      console.log(cart);
      console.log(userId);
      let address = await addressdbs.find({ userId: userId });
  
      res.render("placeOrder", { userName, userId, userdetails, address, cart });
   
  };
  
  // Place Order Post
  exports.placeOrderPost = async (req, res) => {
    let user = req.session.user;
    const selectedAddress = JSON.parse(req.body.selectedAddress);
    let userId = user.user_id;
    let userName = user.username;
    const cart = await Cart.find({ userid: userId });
    console.log(cart);
    try {
      let products = [];
      let totalQuantity = 0;
      let totalPrice = 0;
      cart.forEach(async (cartItem) => {
        products.push({
          productid: cartItem.productid,
          product: cartItem.product,
          quantity: cartItem.quantity,
          price: cartItem.price,
        });
        totalQuantity += cartItem.quantity;
        totalPrice += cartItem.price;
        await Product.updateOne({ _id: cartItem.productid }, { $inc: { stock: -cartItem.quantity } });
      });
      const newOrder = new orderDb({
        userId: userId,
        username: userName,
        products: products,
        totalQuantity: totalQuantity,
        totalPrice: totalPrice,
        address: {
          address: selectedAddress.address,
          city: selectedAddress.city,
          state: selectedAddress.state,
          pincode: selectedAddress.pincode
        },
        status: "Pending",
        orderDate: new Date(),
        deliveryDate: new Date().setDate(new Date().getDate() + 7), // set delivery date to one week from now
      });
      await newOrder.save();
      console.log(newOrder);
      await Cart.deleteMany({ userid: userId });
      res.redirect(`/orderconfirmed/${userId}`);
    } catch (err) {
      console.error(err);
      res.status(500).send("Server Error");
    }
  };





  onst orderpage = async (req, res) => {
    const id = req.session.userid
    const usercart = await cartcollection.find({ userid: req.session.userid });
    if (usercart.length > 0) {
        let totalPrice
      
        if (usercart && usercart.length > 0) {
            totalPrice = 0;
            for (let i = 0; i < usercart.length; i++) {
                totalPrice += usercart[i].quantity * usercart[i].price;
            }
        }
        const useraddress = await addresscollection.find({ userid: id })
        const totalQuantity = usercart.reduce((total, item) => total + item.quantity, 0);
        res.render('ordersummary', { usercart, useraddress, totalQuantity, totalPrice })
    } else {
        res.redirect('/cartitems')
    }
}



//cart page controller codes

getRemoveCart: async (req, res) => {
    const productId = req.params.id;
    const cart = await Cart.findByIdAndDelete(productId)
    res.redirect('/cart')
  },

  getAddQuantity: async (req, res) => {
    const productId = req.params.id;
    const cart = await Cart.findOne({ _id: productId });
    cart.quantity++;
    cart.save();
    res.json({ updatedQuantity: cart.quantity })
  },

  getSubQuantity: async (req, res) => {
    const productId = req.params.id;
    const cart = await Cart.findOne({ _id: productId });
    if (cart.quantity > 1) {
      cart.quantity--;
      cart.save();
      res.json({ updatedQuantity: cart.quantity })
    } else {
        res.redirect("/cart");
    }
  },

  getCheckOut: async (req, res) => {
    const cart = await Cart.find( { userid: req.session.userId } )
    const addresses = await Address.find( { userid: req.session.userId } )
    res.render('checkout', { userid: req.session.userId, cart, addresses })
  },
  
  postPlaceOrder: async (req, res) => {
    const cart = await Cart.find( { userid: req.session.userId } )
    const currentDate = new Date();
    for( const item of cart ){
      const newOrder = new Order({
        userid: item.userid,
        user: item.user,
        productid: item.productid,
        product: item.product,
        price: item.price,
        quantity: item.quantity,
        addressid: req.body.address,
        orderdate: currentDate,
        status: 'pending',
      })
      
      newOrder.save()
      await Product.updateOne( { _id: item.productid }, { $inc: { stock: -item.quantity } } )
    }
    await Cart.deleteMany( { userid: req.session.userId } )
    res.render('orderconfirm')
  },


//cart page ejs



  <body class="bg-light">
    <header class="navbar navbar-expand-lg navbar-light bg-primary">
        <a class="navbar-brand text-light" href="/userhome">E-Cart</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <input class="form-control mr-sm-2 ml-auto col-md-4" type="search" placeholder="Search Product"
                aria-label="Search">
            <button class="btn btn-light" type="submit">Search</button>
            <ul class="navbar-nav ml-auto">
                <li class="nav-item"><a class="nav-link text-light" href="/cart">Cart</a></li>
                <li class="nav-item"><a class="nav-link text-light" href="#">Wishlist</a></li>
                <li class="nav-item"><a class="nav-link text-light" href="/userprofile/<%= userId %>">Account</a></li>
                <li class="nav-item"><a class="nav-link text-light" href="/logout">Logout</a></li>
            </ul>
        </div>
    </header>

    <div class="container mt-5">
        <h1 class="text-primary">Shopping Cart</h1>
        <hr>

        <div class="row">
            <div class="col-md-8">
                <% if (cart.length> 0) { %>
                    <% cart.forEach(( product, index )=> { %>
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <img src="/static/<%= product.image %>" alt="<%= product.product %>"
                                            class="img-fluid" style="height: 120px; width: 100px;">
                                    </div>
                                    <div class="col-md-6">
                                        <h5>
                                            <%= product.product %>
                                        </h5>
                                        <p><strong>Price:</strong> ₹ <%= product.price %>
                                        </p>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <p><strong>Quantity: </strong></p>
                                            </div>
                                            <div class="input-group col-md-6">
                                                <div class="input-group-prepend">
                                                    <!-- <button class="btn btn-outline-secondary" type="button"
                                                        id="subtractBtn">-</button> -->
                                                        <button class="btn btn-outline-secondary" id="subtractBtn"
                                                            onclick="subtractQuantity('<%= product._id %>', '<%= product.price %>', '<%= index %>')">-</button>
                                                </div>
                                                <input type="number" value="<%= product.quantity %>" min="1" max="10"
                                                    class="form-control quantityInput_<%= index %>" id="quantityInput_<%= index %>"
                                                    style="width: 30px;" readonly>
                                                <div class="input-group-append">
                                                    <!-- <a href="/cart/addcartquantity/<%= product._id %>"
                                                        class="btn btn-outline-secondary" id="addBtn">+</a> -->
                                                        <button class="btn btn-outline-secondary" id="addBtn"
                                                        onclick="addQuantity('<%= product._id %>', '<%= product.price %>', '<%= index %>')">+</button>
                                                </div>
                                            </div>
                                        </div>
                                        <p class="mt-2 total_<%= index %>""><strong>Total:</strong> ₹ <%= product.price * product.quantity
                                                %>
                                        </p>
                                    </div>
                                    <div class="col-md-3">
                                        <!-- <button class="btn btn-danger">Remove</button> -->
                                        <a href="/cart/removefromcart/<%= product._id %>"
                                            class="btn btn-danger">Remove</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <% }); %>
                            <% } else { %>
                                <div class="col">
                                    <h1 class="text-center">Cart is empty!</h1>
                                </div>
                                <% } %>
            </div>

            <% if (cart.length> 0) { %>
                <!-- Cart Summary -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            
                                <a href="/cart/checkout" class="btn btn-primary btn-block">Proceed to Checkout</a>
                        </div>
                    </div>
                </div>
                <% } %>

        </div>
    </div>

    <script>
        function subtractQuantity(productId, price, index) {
            fetch(`/cart/subcartquantity/${productId}`)
                .then(response => {
                    return response.json();
                })
                .then(data => {
                    updateQuantityAndTotal(data.updatedQuantity, price, index);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function addQuantity(productId, price, index) {
            fetch(`/cart/addcartquantity/${productId}`)
                .then(response => {
                    return response.json();
                })
                .then(data => {
                    updateQuantityAndTotal(data.updatedQuantity, price, index);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function updateQuantityAndTotal(quantity, price, index) {
        const quantityInput = document.querySelector(`.quantityInput_${index}`);
        quantityInput.value = quantity;

        const totalPrice = document.querySelector(`.total_${index}`);
        totalPrice.innerHTML = `<strong>Total:</strong> ₹ ${price * quantity}`;

        // const summaryTotalQuantity = document.querySelector('.summarytotalquantity');
        // summaryTotalQuantity.innerHTML = `<strong>Total Items:</strong> ${quantity}`;
        
        // const summaryTotalPrice = document.querySelector('.summarytotalprice');
        // summaryTotalPrice.innerHTML = `<strong>Total Price:</strong> ₹ ${price * quantity}`;
    }
    </script>









    
    const ordercheckout = async (req, res) => {
        const usercart = await cartcollection.find({ userid: req.session.userid });
        const today = new Date();
        const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
        const todaydate = today.toLocaleString('en-US', options);
        const deliveryDate = new Date(today);
        deliveryDate.setDate(today.getDate() + 4);
        const deliveryDateString = deliveryDate.toLocaleString('en-US', options);
    
        for (const item of usercart) {
            const orderData = {
                userid: item.userid,
                username: item.username,
                productid: item.productid,
                productname: item.product,
                quantity: item.quantity,
                price: item.price,
                status: 'pending',
                orderdate: todaydate,
                deliverydate: deliveryDateString,
                address: req.body.selectedaddress,
                paymentmode: req.body.paymentmode,
            };
    
            await ordercollection.create(orderData);
            
            await productcollection.updateOne(
                { _id: item.productid },
                { $inc: { Stock: -item.quantity } }
            );
        }
    
        await cartcollection.deleteMany({ userid: req.session.userid });
    
        try {
            const popupHTML = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Order Received</title>
            </head>
            <body>
                <div>
                    <p>Your order has been received!</p>
                </div>
                <script>
                    setTimeout(() => {
                        window.location.href = '/userhome';
                    }, 3000);
                </script>
            </body>
            </html>
            `;
    
            // Send the HTML page as response
            res.type('text/html').send(popupHTML);
        } catch (error) {
            console.log(error);
        }
    };
    


    router.get('/admin/orders', async (req, res) => {
        try {
            const orders = await Order.find();
            res.render('admin/orderManagement', { orders });
        } catch (error) {
            console.error(error);
            res.status(500).send('Internal Server Error');
        }
    });
    
    // Update Order Status (e.g., mark as processed)
    router.post('/admin/orders/:orderId/update-status', async (req, res) => {
        try {
            const orderId = req.params.orderId;
            const newStatus = req.body.newStatus;
    
            await Order.findByIdAndUpdate(orderId, { $set: { status: newStatus } });
    
            res.redirect('/admin/orders');
        } catch (error) {
            console.error(error);
            res.status(500).send('Internal Server Error');
        }
    });
    




    try {
        const userId = req.session.userid;
        const userCart = await cartm.find({ userid: userId });
    
        if (userCart.length > 0) {
            let totalPrice = 0;
    
            // Calculate total price and create order products array
            const products = userCart.map(item => {
                console.log("item",item);
                totalPrice += item.quantity * item.price;
                return {
                    productid: item.productid,
                    productname: item.productname,
                    quantity: item.quantity,
                    price: item.price,
                };
            });
    
            // Create an order and save it to the database
            const order = new orderm({
                userid: userId,
                username: req.session.username,
                products: products,
                status: 'pending',
                orderdate: Date.now(),
              
            });
            console.log("it is saved :",order)
    
            // Save the order to the database
            await order.save();

            res.render("orderconfirmedpage");
        } else {
            res.redirect("/cart");
        }
    } catch (error) {
        console.error(error);
        res.status(500).send('Internal Server Error');
    }









    <% if (order.status !== "Cancelled") { %>
        <button class="cancel-button" onclick="confirmCancel('<%= order._id %>')">Cancel</button>
    <% } %>
    id="actions<%= index %>"




    <script>
    async function cancelOrder(orderId, rowIndex) {
        // Display a confirmation dialog
        var isConfirmed = confirm("Are you sure you want to cancel this order?");

        // If the user confirms, submit the cancellation request to the server
        if (isConfirmed) {
            try {
                // Assuming you have an API endpoint for cancellation
                const response = await fetch("/profile/cancelord/" + orderId, {
                    method: "GET",
                    // Add any necessary headers
                });

                // Check if the cancellation was successful (adjust the condition based on your server response)
                if (response.ok) {
                    // Update the status and hide the actions in the corresponding row
                    updateOrderStatusAndHideActions(rowIndex, "Canceled");
                } else {
                    console.error("Cancellation failed. Server returned:", response.status, response.statusText);
                    // Handle error or provide user feedback
                }
            } catch (error) {
                console.error("Error during cancellation:", error);
                // Handle error or provide user feedback
            }
        }
    }
    function updateOrderStatusAndHideActions(rowIndex, newStatus) {
        // Update the status in the corresponding row
        var statusCell = document.getElementById("status" + rowIndex);
        statusCell.innerHTML = newStatus;

        // Hide the actions column in the corresponding row
        var actionsCell = document.getElementById("actions" + rowIndex);
        actionsCell.innerHTML = '<div class="canceled-message">Order Canceled</div>';
    }
</script>
















<div class="container mt-5">
      <div class="row">
          <div class="col-lg-6">
              <!-- Main Product Image -->
              <img src="<%= productdata.img[0] %>" alt="Product Image" class="img-fluid rounded">
          </div>
          <div class="col-lg-6">
              <!-- Product Details -->
              <h2 class="mb-3 text-primary"><%= productdata.productname %></h2>
              <p class="text-muted"><%= productdata.category %></p>
              <p class="lead">Price: <%= productdata.price %></p>
              <p><%= productdata.description %></p>
  
              <!-- Additional Product Images Grid -->
              <div class="row mt-4">
                  <% productdata.img.slice(1, 5).forEach((img, index) => { %>
                      <div class="col-3 mb-3">
                          <img src="<%= img %>" alt="Product Image" class="img-fluid rounded">
                      </div>
                  <% }); %>
              </div>
  
              <!-- Add to Cart Button -->
              <div class="d-flex justify-content-between align-items-center mt-4">
                  <a id="addToCartBtn" href="/cart/add/<%= productdata._id %>" class="btn btn-warning">Add to Cart</a>
                  <button class="btn btn-success ms-3">Buy Now</button>
              </div>
          </div>
      </div>
  </div>















  <div class="form-group">
                            <label for="productName">Product Name:</label>
                            <input type="text" class="form-control" id="productName" name="productname" required>
                        </div>

                        <div class="form-group">
                            <label for="category">Category:</label>
                            <select name="category" class="form-control" id="Malik" required>
                                <% if (Category.length > 0) { %>
                                    <% for (let i = 0; i < Category.length; i++) { %>
                                        <option value="<%= Category[i]._id %>"><%= Category[i].category %></option>
                                    <% } %>
                                <% } else { %>
                                    <option value="" disabled>No items available</option>
                                <% } %>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="price">Price:</label>
                            <input type="text" class="form-control" id="price" name="price" required>
                        </div>

                        <div class="form-group">
                            <label for="rating">Rating:</label>
                            <input type="text" class="form-control" id="rating" name="rating" required>
                        </div>

                        <div class="form-group">
                            <label for="model">Model:</label>
                            <input type="text" class="form-control" id="model" name="model" required>
                        </div>

                        <div class="form-group">
                            <label for="description">Description:</label>
                            <textarea class="form-control" id="description" name="description" rows="2" required></textarea>
                        </div>
                        <div class="form-group">
                            <label for="image">Image:</label>
                            <input type="file" class="form-control-file" id="image" name="img" accept="image/*" multiple
                                   onchange="initCropper(event)">
                            <div id="image-container" class="mt-3"></div>
                        </div>

















 <%- include('header') -%>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

<style>
    body {
        background-color: #b3b3b3;
        background-image: url("/images/bg.jpg");
    }

    .container {
        margin-top: 50px;
    }
    .card {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: none;
    }
    .card-body {
        padding: 40px;
    }

    h1 {
        font-size: 2.5rem;
        margin-bottom: 30px;
        color: #333;
    }

    label {
        font-weight: 500;
    }

    input[type="text"],
    select,
    textarea {
        width: 100%;
        padding: 10px;
        margin-top: 6px;
        margin-bottom: 16px;
        display: inline-block;
        border: 1px solid #ccc;
        box-sizing: border-box;
        border-radius: 4px;
    }

    input[type="file"] {
        margin-top: 10px;
    }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    .btn-primary,
    .btn-success,
    .btn-danger {
        color: #fff;
        padding: 10px 20px;
        font-size: 1rem;
    }
    .image-container-row {
        white-space: nowrap;
        overflow-x: auto; /* Add horizontal scrollbar if the content overflows */
    }
    .image-container {
     width: 240px;
    height: 170px;
    display: inline-block;
    margin-right: 10px;
    border: 1px solid red; /* Add a border for debugging */
}
    
    .image-container img {
        max-width: 100%; /* Ensure images don't exceed the container width */
        max-height: 100%; /* Ensure images don't exceed the container height */
    }
    .save-button,
    .remove-button {
        display: block;
        width: 100%; /* Make buttons take the full width of the container */
        margin-top: 5px;
    }
</style>

<div class="container">
    <div class="card">
        <div class="card-body">
            <div class="text-center">
                
                <div class="text-center">
                    <a href="/productmanage" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> 
                    </a>
                    <button type="submit" class="btn btn-success">Add Product</button>
                </div>
            </div>

            <h1 class="mb-4 text-center"></h1>

            <form action="/productmanage/addedproduct" method="POST" enctype="multipart/form-data"
                onsubmit="submitForm(event)">
                <div class="form-group">
                            <label for="productName">Product Name:</label>
                            <input type="text" class="form-control" id="productName" name="productname" required>
                        </div>

                        <div class="form-group">
                            <label for="category">Category:</label>
                            <select name="category" class="form-control" id="Malik" required>
                                <% if (Category.length > 0) { %>
                                    <% for (let i = 0; i < Category.length; i++) { %>
                                        <option value="<%= Category[i]._id %>"><%= Category[i].category %></option>
                                    <% } %>
                                <% } else { %>
                                    <option value="" disabled>No items available</option>
                                <% } %>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="price">Price:</label>
                            <input type="text" class="form-control" id="price" name="price" required>
                        </div>

                        <div class="form-group">
                            <label for="rating">Rating:</label>
                            <input type="text" class="form-control" id="rating" name="rating" required>
                        </div>

                        <div class="form-group">
                            <label for="model">Model:</label>
                            <input type="text" class="form-control" id="model" name="model" required>
                        </div>

                        <div class="form-group">
                            <label for="description">Description:</label>
                            <input type="text" class="form-control" id="description" name="description" required>
                        </div>
                        <div class="form-group">
                            <label for="image">Image:</label>
                            <input type="file" class="form-control-file" id="image" name="img" accept="image/*" multiple
                                   onchange="initCropper(event)">
                            <div id="image-container" class="mt-3"></div>
                        </div>
            </form>
        </div>
    </div>
</div>


<script>
    const imageContainer = document.getElementById('image-container');
    let croppers = [];
    let croppedImagesData = []; // Array to store cropped image data
    let isSaveClicked = false; // Flag to track if the Save button is clicked

    document.getElementById('image').addEventListener('change', (event) => {
        const files = event.target.files;

        for (const file of files) {
            const reader = new FileReader();

            reader.onload = (event) => {
                const image = new Image();
                image.src = event.target.result;

                image.onload = () => {
                    const containerDiv = document.createElement('div');
                    containerDiv.className = 'image-container';

                    const imageElement = document.createElement('img');
                    imageElement.src = image.src;
                    containerDiv.appendChild(imageElement);

                    // Set a fixed height for the container
                    containerDiv.style.height = '150px';

                    // Create a new Cropper for each image without a fixed aspect ratio
                    const cropper = new Cropper(imageElement, {
                        aspectRatio: NaN, // Allow freeform cropping
                        viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
                    });

                    // Create a "Save" button for each image
                    const saveButton = document.createElement('button');
                    saveButton.className = 'btn btn-success save-button';
                    saveButton.textContent = 'Save';
                    saveButton.addEventListener('click', () => {
                        // Get the cropped image data for the specific cropper
                        const croppedCanvas = cropper.getCroppedCanvas();
                        const croppedImageData = croppedCanvas.toDataURL('image/jpeg');

                        // Store cropped image data in the array
                        croppedImagesData.push(croppedImageData);

                        // Optionally, you can remove the "Save" button after saving
                        containerDiv.removeChild(saveButton);

                        // Set the flag to indicate that Save button is clicked
                        isSaveClicked = true;
                    });

                    // Create a "Remove" button for each image
                    const removeButton = document.createElement('button');
                    removeButton.className = 'btn btn-danger remove-button';
                    removeButton.textContent = 'Remove';
                    removeButton.addEventListener('click', () => {
                        // Remove the corresponding image and cropper
                        const index = croppers.indexOf(cropper);
                        if (index !== -1) {
                            croppers.splice(index, 1);
                            croppedImagesData.splice(index, 1);
                        }
                        containerDiv.remove();

                        // Reset the flag if there are no images left
                        if (croppers.length === 0) {
                            isSaveClicked = false;
                        }
                    });

                    containerDiv.appendChild(saveButton);
                    containerDiv.appendChild(removeButton);

                    imageContainer.appendChild(containerDiv);
                    croppers.push(cropper);
                };
            };

            reader.readAsDataURL(file);
        }
    });

    // Handle form submission (for adding product)
    function submitForm(event) {
        // Prevent form submission if Save button is not clicked
        if (!isSaveClicked) {
            event.preventDefault();
            // Show validation message
            document.getElementById('validationMessage').textContent = 'Please save the image first.';
        } else {
            // Add the cropped image data to the form data
            croppedImagesData.forEach((croppedImageData, index) => {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = `croppedImages[${index}]`;
                hiddenInput.value = croppedImageData;
                document.querySelector('form').appendChild(hiddenInput);
            });

            // Optionally, you can also reset the croppers and image containers
            resetCroppersAndContainers();
        }
    }

    // Function to reset croppers and containers
    function resetCroppersAndContainers() {
        // Reset the croppers array
        croppers = [];

        // Remove all child elements from the imageContainer
        while (imageContainer.firstChild) {
            imageContainer.removeChild(imageContainer.firstChild);
        }

        // Clear the file input
        const fileInput = document.getElementById('image');
        fileInput.value = '';

        // Clear the cropped image data array
        croppedImagesData = [];

        // Reset the Save button click flag
        isSaveClicked = false;

        // Clear the validation message
        document.getElementById('validationMessage').textContent = '';
    }


    document.getElementById('priceInput').addEventListener('input', function () {
        // Get the current value of the price input
        const priceValue = parseFloat(this.value);

        // Check if the value is less than 1
        if (isNaN(priceValue) || priceValue < 1) {
            // Display an error message
            document.getElementById('priceValidationMessage').textContent = 'Price must be greater than or equal to 1';
        } else {
            // Clear the error message if the value is valid
            document.getElementById('priceValidationMessage').textContent = '';
        }
    });
</script>


<%- include('footer') -%>



<!-- Content Wrapper -->
<div id="container-fluid" class="d-flex flex-column">
  <!-- Main Content -->
  <div id="content">
    <!-- Begin Page Content -->
    <div class="container-wrapper">
      <!-- Page Heading -->
      <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800"></h1>
      </div>

      <!-- Content Start Here -->
      <div class="row">
        <!-- Area Chart -->
        <div class="col-xl-8 col-lg-7">
          <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
              <h6 class="m-0 font-weight-bold text-primary"></h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
              <label for="chartSelector">Select Chart Type:</label>
              <select class="form-control" id="chartSelector" onchange="updateChart()">
                <option value="mychart1">Daily Orders</option>
                <option value="mychart2">Weekly Orders</option>
                <option value="mychart3">Yearly Orders</option>
              </select>
              <div class="chart-area">
                <!-- Chart code start here -->
                <div class="chart-container">
                  <canvas id="mychart1" data-dates="<%= JSON.stringify(dates) %>" data-dailyOrder="<%= JSON.stringify(orderCounts) %>"></canvas>
                </div>
                <div class="chart-container">
                  <canvas id="mychart2" data-weekly="<%= JSON.stringify(weekdata) %>"></canvas>
                </div>
                <div class="chart-container">
                  <canvas id="mychart3" data-yearlyOrders="<%= JSON.stringify(totalOrderCount3) %>"></canvas>
                </div>
                <!-- Chart code End here -->
              </div>
            </div>
          </div>
        </div>

        <!-- Pie Chart -->
              <div class="card-body">
                <div class="chart-pie pt-4 pb-2">
                    <div class="">
                        <div class="col">
                            <input type="date" name="startingdate" id="startingDate"
                                class="form-control">
                        </div>
                        <div class="col">
                            <input type="date" name="endingdate" id="endingDate"
                                class="form-control">
                        </div>
                    </div>
                    <br>
                    <button class="btn btn-primary btn-block mb-"
                        onclick="generateReport('pdf')">PDF Report</button>
                    <button class="btn btn-primary btn-block"
                        onclick="generateReport('excel')">Excel Report</button>
                </div>
            </div>

          </div>
        </div>
      </div>

    </div>
  </div>
  
  <script>     


  function generateReport(reportType) {
      const startingDate = document.getElementById('startingDate').value;
      const endingDate = document.getElementById('endingDate').value;
      if (reportType === 'pdf') {
        window.location.href = `/admin/pdfreport?startingdate=${startingDate}&endingdate=${endingDate}`;
      } else if (reportType === 'excel') {
        window.location.href = `/admin/excelreport?startingdate=${startingDate}&endingdate=${endingDate}`;
      }
    }

    document.addEventListener("DOMContentLoaded", function () {
      // Chart 1
      const chart1Container = document.querySelector('#mychart1');
      const rawDates = chart1Container.getAttribute('data-dates');
      const dates = JSON.parse(rawDates);
      const rawDailyOrders = chart1Container.getAttribute('data-dailyOrder');
      const dailyOrders = JSON.parse(rawDailyOrders);

      const orderEndDate = moment(dates[dates.length - 1]); // Use the last order date as the end date
      const lastSevenDays = [];
      let orders = [];

      // Generate labels for the last 7 days from the current date
      for (let i = 6; i >= 0; i--) {
        const date = orderEndDate.clone().subtract(i, 'days').format('YYYY-MM-DD');
        let index = dates.indexOf(date);
        if (index !== -1) {
          orders.push(dailyOrders[index]);
        } else {
          orders.push(0);
        }
        lastSevenDays.push(date);
      }

      const ctx1 = document.getElementById('mychart1').getContext('2d');
      const masspopchart1 = new Chart(ctx1, {
        type: 'bar',
        data: {
          labels: lastSevenDays,
          datasets: [{
            label: 'Daily Orders',
            data: orders,
            backgroundColor: ['rgb(54, 162, 235)', 'rgb(255, 99, 132)'],
            barThickness: 20
          }]
        },
        options: {
          animation: {
            duration: 2000,
            easing: 'easeInOutQuart',
            onProgress: function (animation) {
              console.log("progress", animation.progress);
            },
            onComplete: function (animation) {
              console.log('Animation complete');
            }
          }
        }
      });


    //chart 2


const chart2Container = document.querySelector('#mychart2');
document.getElementById("mychart2").style.display = "none";
const rawWeeklyOrders = chart2Container.getAttribute('data-weekly');
const WeeklyData = JSON.parse(rawWeeklyOrders);

// Limit the number of weeks to display (adjust as needed)
const numberOfWeeksToShow = 8;

const currentDate = new Date();
const currentYear1 = currentDate.getFullYear();

const weeklyLabels = Array.from({ length: numberOfWeeksToShow }, (_, index) => {
const weekNumber = index + 1;
const startDate = new Date(currentYear1, 0, 1);
startDate.setDate(startDate.getDate() + index * 7);
const endDate = new Date(startDate);
endDate.setDate(endDate.getDate() + 6);

const startMonth = startDate.getMonth() + 1;
const startDay = startDate.getDate();

const endMonth = endDate.getMonth() + 1;
const endDay = endDate.getDate();

return `Week ${weekNumber} (${startMonth}/${startDay} - ${endMonth}/${endDay})`;
});

const ctx2 = document.getElementById('mychart2').getContext('2d');

let masspopchart2 = new Chart(ctx2, {
type: 'bar',
data: {
  labels: weeklyLabels,
  datasets: [{
    label: 'Weekly Orders',
    data: WeeklyData.slice(0, numberOfWeeksToShow), // Limit data to the selected weeks
    backgroundColor: 'rgb(54, 162, 235)',
    barThickness: 20
  }]
},
options: {
  responsive: true,
  maintainAspectRatio: false,
  animation: {
    duration: 2000,
    easing: 'easeInOutQuart',
    onProgress: function (animation) {
      console.log(animation.progress);
    },
    onComplete: function (animation) {
      console.log('Animation complete');
    }
  },
  scales: {
    x: {
      type: 'category',
      labels: weeklyLabels,
      ticks: {
        autoSkip: false,
        maxRotation: 45,
      }
    },
    y: {
      beginAtZero: true,
    }
  }
}
});
      // Chart 3
      const chart3Container = document.querySelector('#mychart3');
      document.getElementById("mychart3").style.display = "none";
      const rawYearlyOrders = chart3Container.getAttribute('data-yearlyOrders');
      const yearlyOrders = rawYearlyOrders.split(',').map(Number);

      const currentYear = new Date().getFullYear();

      const yearlyLabels = Array.from({ length: 5 }, (_, index) => currentYear + index);

      const ctx3 = document.getElementById('mychart3').getContext('2d');

      let masspopchart3 = new Chart(ctx3, {
        type: "bar",
        data: {
          labels: yearlyLabels,
          datasets: [{
            label: 'Yearly Orders',
            data: yearlyOrders,
            backgroundColor: ['rgba(144, 238, 144, 20)', 'rgba(54, 162, 235, 0.2)'],
            barThickness: 20
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          animation: {
            duration: 2000,
            easing: 'easeInOutQuart',
            onProgress: function (animation) {
              console.log(animation.progress);
            },
            onComplete: function (animation) {
              console.log('Animation complete');
            }
          },
          scales: {
            x: {
              type: 'category',
              labels: yearlyLabels.map(String),
              ticks: {
                autoSkip: false,
                maxRotation: 45,
              }
            },
            y: {
              beginAtZero: true,
            }
          }
        }
      });
    });

    function updateChart() {
      var selectedChart = document.getElementById("chartSelector").value;

      // Hide all charts
      document.getElementById("mychart1").style.display = "none";
      document.getElementById("mychart2").style.display = "none";
      document.getElementById("mychart3").style.display = "none";

      // Show the selected chart
      document.getElementById(selectedChart).style.display = "block";
    }
  </script>

  



  try {
    const userid = req.session.userid;
    const orderid = req.params.id;
    const productid = req.params.productid;
    const userDetails = await userm.findById(userid);
    const order = await orderm.findById(orderid);
    const orderAddress = await addressm.findById(order.address)
    console.log(userDetails);
    let productdata;

    for (let product of order.productcollection) {
        if (productid == product.productid) {
            productdata = product;
            break;
        }
    }

    const doc = new PDFDocument();

    // Set response headers to trigger a download
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", 'attachment; filename="invoice.pdf"');

    // Pipe the PDF document to the response
    doc.pipe(res);

    const imagePath = "assets/images/logo.png";
    const imageWidth = 100;
    const imageX = 550 - imageWidth;
    const imageY = 50;

    doc.image(imagePath, imageX, imageY, { width: imageWidth });
    doc.moveDown(1);

    // Add content to the PDF document
    doc.fontSize(16).text("Billing Details", { align: "center" });
    doc.moveDown(1);
    doc.fontSize(10).text("Order Details", { align: "center" });
    doc.text(`Order ID: ${orderid}`);
    doc.moveDown(0.3);
    doc.text(`Name: ${order.username || ""}`);
    doc.moveDown(0.3);
    doc.text(`Email: ${userDetails.email || ""}`);
    doc.moveDown(0.3);

    doc.moveDown(0.3);
    doc.text(`Address: ${orderAddress.address || ""}`);
    doc.moveDown(0.3);
    doc.text(`Payment Method: ${order.paymentmode|| ""}`);

    console.log("hghgd");

    doc.moveDown(0.3);

    const headerY = 300; // Adjust this value based on your layout
    doc.font("Helvetica-Bold");
    doc.text("Name", 100, headerY, { width: 150, lineGap: 6 });
    doc.text("Status", 300, headerY, { width: 150, lineGap: 5 });
    doc.text("Quantity", 400, headerY, { width: 150, lineGap: 5 });
    doc.text("Price", 500, headerY, { width: 50, lineGap: 5 });
    doc.font("Helvetica");

    // Table rows
    const contentStartY = headerY + 30; // Adjust this value based on your layout
    let currentY = contentStartY;

    doc.text(productdata.productname || "", 100, currentY, {
        width: 150,
        lineGap: 5,
    });

    doc.text(productdata.status || "", 300, currentY, {
        width: 50,
        lineGap: 5,
    });

    doc.text(productdata.quantity || "", 400, currentY, {
        width: 50,
        lineGap: 5,
    });

    doc.text(productdata.price || "", 500, currentY, {
        width: 50,
        lineGap: 5,
    });

    // Calculate the height of the current row and add some padding
    const lineHeight = Math.max(
        doc.heightOfString(productdata.productname || "", { width: 150 }),
        doc.heightOfString(productdata.status || "", { width: 150 }),
        doc.heightOfString(productdata.price || "", { width: 50 })
    );

    currentY += lineHeight + 10; // Adjust this value based on your layout

    doc.text(`Total Price: ${productdata.price * productdata.quantity || ""}`, {
        width: 400, // Adjust the width based on your layout
        lineGap: 5,
    });

    // Set the y-coordinate for the "Thank you" section
    const separation = 50; // Adjust this value based on your layout
    const thankYouStartY = currentY + separation; // Update this line

    // Move to the next section
    doc.y = thankYouStartY; // Change this line

    // Move the text content in the x-axis
    const textX = 60; // Adjust this value based on your layout
    const textWidth = 500; // Adjust this value based on your layout

    doc
        .fontSize(16)
        .text(
            "Thank you for choosing My-Cart! We appreciate your support and are excited to have you as part of our family.",
            textX,
            doc.y,
            { align: "left", width: textWidth, lineGap: 10 }
        );

    doc.end();

} catch (err) {
    console.error(err);
    return res.status(500).send("Failed to fetch orders. Please try again.");
}
},






<% if (orders.length > 0) { %>
    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Product Name</th>
                <th scope="col">Total Amount</th>
                <th scope="col">Quantity</th>
                <th scope="col">Status</th>
                <th scope="col">Order Date</th>
                <th scope="col">Actions</th>
                <!-- New column for "View More" button -->
                <th scope="col">View More</th>
            </tr>
        </thead>
        <tbody>
            <% orders.forEach((order, orderIndex) => { %>
                <!-- Display order details -->
                <tr>
                    <td><%= orderIndex + 1 %></td>
                    <td><%= order.orderdate %></td>
                    <!-- Add other order-related fields as needed -->
            
                    <!-- Iterate through the productcollection array for each order -->
                    <% order.productcollection.forEach((product, productIndex) => { %>
                        <tr>
                            <td></td> <!-- Leave a space for order number or any other order-related info -->
                            <td><%= product.productname %></td>
                            <td>₹<%= product.price * product.quantity %></td>
                            <td><%= product.quantity %></td>
                            <td id="status<%= productIndex %>"><%= product.status %></td>
                            <td><%= order.orderdate %></td>
                            <td id="actions<%= productIndex %>">
                                <% if (product.status !== "Cancelled") { %>
                                    <button class="cancel-button" onclick="confirmCancel('<%= order._id %>', <%= productIndex %>)">Cancel Order</button>
                                <% } else { %>
                                    <div class="canceled-message">Order Canceled</div>
                                <% } %>
                            </td>
                            <!-- "View More" button -->
                            <% if (product.status !== "Cancelled") { %>
                                <td>
                                    <a href="/profile/ordersummary/<%= order._id %>/<%= product.productid %>" class="btn btn-primary">View More</a>
                                </td>
                            <% } else { %>
                                <td></td> <!-- Empty cell if product status is cancelled -->
                            <% } %>
                        </tr>
                    <% }); %>
                </tr>
            <% }); %>
        </tbody>
    </table>
<% } else { %>
    <div class="alert alert-info" role="alert">
        No orders available.
    </div>
<% } %>




<% orders.forEach(order => { %>
    <% order.productcollection.forEach(product => { %>



        <% }); %>
        <% }); %>








         // Handle confirmation button click
         document.getElementById("confirmButton").onclick = async function () {
            try {
                console.log("Cancel Order ID:", orderId); // Add this line to log the order ID
                const response = await fetch("/profile/cancelord/" + orderId, {
                    method: "GET",
                });

                console.log("Server response:", response);

                if (response.ok) {
                    const result = await response.json();
                    updateOrderStatusAndHideActions(rowIndex, "Cancelled");
                    console.log(result.success);
                } else if (response.status === 404) {
                    console.error("Order not found");
                } else {
                    console.error("Cancellation failed. Server returned:", response.status, response.statusText);
                }
            } catch (error) {
                console.error("Error during cancellation:", error);
            }

            // Close the modal after the action is performed
            modal.style.display = "none";
        };

        function confirmCancel(orderId, rowIndex) {
            var modal = document.getElementById("confirmationModal");
            modal.style.display = "block";
    
           
        }

















try {
    const userid = req.session.userid;
    console.log(userid)
    const orderid = req.params.id;
    const productid = req.params.productid;
    const userDetails = await userm.findById(userid)
    const order = await orderm.findById(orderid)
    const productdata = await products.findById(order.productid)
    const orderAddress = await addressm.findById(order.address)
    
    for(let product of order.productname){
      if (productid == product.productid) {
        productdata = product;
        break;
    }
 }
 console.log(productdata)

    const doc = new PDFDocument();

    // Set response headers to trigger a download
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", 'attachment; filename="invoice.pdf"');
    // Pipe the PDF document to the response
    doc.pipe(res);
    const imagePath = "assets/images/logo.png";
    const imageWidth = 100;
    const imageX = 550 - imageWidth;
    const imageY = 50;
    doc.image(imagePath, imageX, imageY, { width: imageWidth });
    doc.moveDown(1);

    // Add content to the PDF document
    doc.fontSize(16).text("Billing Details", { align: "center" });
    doc.moveDown(1);
    doc.fontSize(10).text("Order Details", { align: "center" });
    doc.text(`Order ID: ${orderid}`); // Use backticks for template literals
    doc.moveDown(0.3);
    doc.text(`Name: ${userDetails.Username || ""}`);
    doc.moveDown(0.3);
    doc.text(`Email: ${userDetails.email || ""}`);
    doc.moveDown(0.3);
    
    doc.moveDown(0.3);
    doc.text(`Address: ${orderAddress.address || ""}`);
    doc.moveDown(0.3);
    doc.text(`Payment Method: ${order.paymentmode || ""}`);
    
    console.log("hdshfh");


    doc.moveDown(0.3);

    const headerY = 300; // Adjust this value based on your layout
    doc.font("Helvetica-Bold");
    doc.text("Name", 100, headerY, { width: 150, lineGap: 6 });
    doc.text("Status", 300, headerY, { width: 150, lineGap: 5 });
    doc.text("quantity", 400, headerY, { width: 150, lineGap: 5 });
  
    doc.text("Price", 500, headerY, { width: 50, lineGap: 5 });
    doc.font("Helvetica");

    // Table rows
    const contentStartY = headerY + 30; // Adjust this value based on your layout
    let currentY = contentStartY;

    doc.text(productdata.productname || "", 100, currentY, {
      width: 150,
      lineGap: 5,
  });

  doc.text(order.status || "", 300, currentY, {
      width: 50,
      lineGap: 5,
  });

  doc.text(order.quantity || "", 400, currentY, {
      width: 50,
      lineGap: 5,
  });


  doc.text(order.price || "", 500, currentY, {
      width: 50,
      lineGap: 5,
  });

  // Calculate the height of the current row and add some padding
          const lineHeight = Math.max(
              doc.heightOfString(productdata.product || "", { width: 150 }),
              doc.heightOfString(productdata.status || "", { width: 150 }),
             
              doc.heightOfString(productdata.price || "", { width: 50 })
          );
          currentY += lineHeight + 10; // Adjust this value based on your layout
     
          doc.text(`Total Price: ${productdata.price * order.quantity || ""}`, {
          width: 400, // Adjust the width based on your layout
          lineGap: 5,
      });


      // Set the y-coordinate for the "Thank you" section
      const separation = 50; // Adjust this value based on your layout
      const thankYouStartY = currentY + separation; // Update this line

      // Move to the next section
      doc.y = thankYouStartY; // Change this line

      // Move the text content in the x-axis
      const textX = 60; // Adjust this value based on your layout
      const textWidth = 500; // Adjust this value based on your layout
      doc
          .fontSize(16)
          .text(
              "Thank you for choosing My-Cart! We appreciate your support and are excited to have you as part of our  family.",
              textX,
              doc.y,
              { align: "left", width: textWidth, lineGap: 10 }
          );

      doc.end();

  } catch (err) {
    console.error(err);
    return res.status(500).send("Failed to fetch orders. Please try again.");
  }
}



const userid= req.session.userdetail._id
            const Productid = req.params.productid;
            const orderid = req.params.orderid;

        
            const orderss=await order.findById(orderid)
            for (const product of orderss.products) {
                const Productid = product.productid; 
                const Quantity = product.quantity;
                const Total = product.price
                const Discount = product.discount

             const returnprice = (Quantity*Total)-Discount


            await Product.updateOne(
                { _id: Productid },
                { $inc: { stock: +Quantity } }
                );

                await User.updateOne(
                    {_id:userid},
                    {$inc:{wallet:returnprice}}
                    )
            }







            getAddCart: async (req, res) => {
                const userId = req.session.userId;
                const productId = req.params.id;
                const cart = await Cart.findOne({ userid: userId, productid: productId });
                if (cart != null) {
                  const product = await Product.findById(cart.productid);
                  if (product.stock > cart.quantity) {
                    cart.quantity++;
                    cart.save();
                  }
                  const productData = await Product.findOne({ _id: productId });
                  res.redirect("/cart");
                } else {
                  const userData = await User.findOne({ _id: userId });
                  const productData = await Product.findOne({ _id: productId });
                  const newCart = new Cart({
                    userid: userData._id,
                    user: userData.username,
                    productid: productData._id,
                    product: productData.productname,
                    price: productData.price,
                    quantity: 1,
                    image: productData.image[0],
                  });
            
                  newCart.save();
                  res.redirect("/cart");
                }
              },



              <body>

    <div class="overlay">
        <h2 class="mb-4">Order Confirmation</h2>

        <% if (userCart.length > 0) { %>
            <!-- Product Details Table -->
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Product</th>
                        <th scope="col">Quantity</th>
                        <th scope="col">Price</th>
                    </tr>
                </thead>
                <tbody>
                    <% userCart.forEach(item => { %>
                        <tr>
                            <td><%= item.product %></td>
                            <td><%= item.quantity %></td>
                            <% const matchingOffer = offers.find(offerItem=>offerItem.cartItem.product === item.product && offerItem.offer !== null); %>
                            <% let displayPrice = item.price*item.quantity; %>
                            <% if(matchingOffer) { %>
                                <% displayPrice -= (item.price * (matchingOffer.offer.discount/100)) * item.quantity %>
                            <% } %>    
                            <td>$<span id="discountprice"><%= displayPrice.toFixed(2) %></span></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>

            <% if (useraddress.length > 0) { %>
                <!-- User Address Table -->
                <h5>Select Shipping Address:</h5>
                <form action="/checkedout" method="post">
                    <% useraddress.forEach((address, index) => { %>
                        <div class="form-check address-checkbox">
                            <input class="form-check-input" type="radio" name="selectedAddress" id="address<%= index %>" value="<%= address._id %>" <% if (index === 0) { %>checked<% } %>
                            <label class="form-check-label" for="address<%= index %>">
                                <strong><%= address.firstname %></strong>
                                <strong><%= address.lastname %></strong><br><br>
                                <%= address.address %><br>
                                <%= address.state %><br>
                                <%= address.city %>, <%= address.pincode %> <%= address.phone %>
                            </label>
                        </div>
                    <% }); %>

                    
                    <!-- Payment Options Box -->
                    <div class="payment-box">
                        <h5>Payment Options</h5>
                        <label for="paymentMethod">Select Payment Method:</label>
                        <select class="form-select" id="paymentMethod" name="paymentMethod" onchange="handlePaymentOptionChange()">
                            <option selected disabled hidden value="selectpay">Select Payment Method</option>
                            <option value="Cash On Delivery">Cash on Delivery</option>
                            <option value="net-banking">Online Banking</option>
                            <option value="wallet">Wallet</option>
                            <!-- Add more payment options as needed -->
                        </select>
                    </div>
                    
                    <!-- Additional information -->
                    <p class="total-price" data-totalprice="<%= totalPrice.toFixed(2) %>" id="price">Total Price: $<%= totalPrice.toFixed(2) %></p>
                    <div id="payNowButton" class="hidden">
                    <div class="d-flex">
                        <h5>Discount:</h5><p id="discountValue" textprimary-></p>
                    </div>

                    <div class="input-group mb-2 ">
                        <input id="couponCode" class="form-control mx-2" type="text"  name="coupon" placeholder="Enter your coupon">
                        <button class="btn btn-dark btn-sm w-50 mb-2 mt-2" type="button" id="coupenbtn"  onclick="applyCoupon('<%= totalPrice %>')"><i class="fas fa-gift me-2"></i>Apply coupon</button>
                        <button class="btn btn-dark btn-sm w-20 mb-2 mt-2 mx-5" type="button" onclick="openConfirmDeleteModal()"></i>View Coupon</button>
                </div>
                    <p id="messageContainer" class="text-danger d-block"></p>
                    <h5>WalletAmount:<span id="wallet-amount">$<%= walletAmount.toFixed(2) %></span><i class="fas fa-wallet"></i></h5>

                    <!-- Submit Order Button -->
                    <button id="confirmOrderButton"  type="button" onclick="validateForm()" class="btn btn-warning">Confirm Order</button>
                    <button id="rzp-button1" style="display: none;"  class="btn btn-primary" type="button" >Pay with Razorpay</button>
                    <button id="wallet-button" type="button"  style="display: none;">Pay Using Wallet</button>
                    <div id="msgbox"></div>
                    </div>
                </form>
               
                
            <% } else { %>
                <!-- No Address Message with Add Address Button -->
                <p>No address found. Please <a href="/addAddress" class="btn btn-primary">Add an address</a></p>
            <% } %>

        <% } else { %>
            <!-- Empty Cart Message -->
            <div class="empty-cart">
                <p>Your cart is empty. <a href="/cart">Go back to Cart</a></p>
            </div>
        <% } %>
 
        <!-- Custom Alert Modal -->
        <div class="modal fade" id="customAlertModal" tabindex="-1" aria-labelledby="customAlertModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="customAlertModalLabel">Alert</h5>
                    </div>
                    <div class="modal-body">
                        <p id="customAlertMessage"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-warning" data-bs-dismiss="modal">OK</button>
                    </div>
                </div>
            </div>
        </div>

        
        <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <!-- modal  -->
        <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog"
            aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmDeleteModalLabel">The available Coupons:</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <% if (coupondata.length > 0) { %>
                        <% coupondata.forEach((coupon, index) => { %>
                            <div class="modal-body">
                                <p id="copymsg" class="text-primary"></p>
                                <div class="row">
                                    <div class="col-md-9">
                                        <p id="<%= 'contentToCopy' + index %>" ><%= coupon.couponcode %></p>
                                    </div>
                                    <div class="col-md-3 d-flex align-items-center justify-content-center">
                                        <button class="btn btn-light btn-sm mt-4" onclick="copyToClipboard('<%= index %>')">Copy</button>
                                    </div>
                                </div>
                            </div>
                        <%})%>
                    <% } %>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                     
                    </div>
                </div>
            </div>
            </div>

    
        <script>

        function copyToClipboard(index) {
                const content = document.getElementById('contentToCopy' + index)?.innerText;

                navigator.clipboard.writeText(content)
                    .then(() => {
                        const copycontent = document.getElementById('copymsg')
                        copycontent.textContent = 'copied!!'
                        setTimeout(()=>{
                          copycontent.textContent = '';
                        },2000)
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                        alert('Failed to copy content. Please copy manually.');
                    });
            }

        function openConfirmDeleteModal(url) {
                console.log("entered");
                $('#confirmDeleteModal').modal('show')
                $('#confirmsoftDeleteBtn').click(function() {
                    window.location.href = url
                });
            }

            function validateForm() {
                var selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
                var paymentMethod = document.getElementById('paymentMethod');

                if (!selectedAddress) {
                    showCustomAlert('Please select a shipping address.');
                } else if (paymentMethod.value === 'selectpay') {
                    showCustomAlert('Please select a payment method.'); 
                } else {
                    // If validation passes, submit the form
                    document.querySelector('form').submit();
                }
            }

            function showCustomAlert(message) {
                var customAlertMessage = document.getElementById('customAlertMessage');
                customAlertMessage.innerText = message;

                // Show the Bootstrap modal
                var customAlertModal = new bootstrap.Modal(document.getElementById('customAlertModal'));
                customAlertModal.show();
            }

            function handlePaymentOptionChange() {
            var paymentMethod = document.getElementById('paymentMethod');
            var confirmOrderButton = document.getElementById('confirmOrderButton');
            var rzpButton = document.getElementById('rzp-button1');
            var walButton = document.getElementById('wallet-button')
            if (paymentMethod.value === 'net-banking') {
                // If Net Banking is selected, hide Confirm Order button and show Razorpay button
                confirmOrderButton.style.display = 'none';
                rzpButton.style.display = 'block';
                walButton.style.display = 'none';
            } else if (paymentMethod.value === 'Cash On Delivery'){
                // If any other payment method is selected, hide Razorpay button and show Confirm Order button
                rzpButton.style.display = 'none';
                confirmOrderButton.style.display = 'block';
                walButton.style.display = 'none';
            }else{
            // For any other payment method, hide both buttons
            rzpButton.style.display = 'none';
            confirmOrderButton.style.display = 'none';
            walButton.style.display = 'block';
            }
        }

        </script>
<!-- 
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script> -->
        <!-- <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script> -->
        <!-- <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script> -->
        <!-- <script src="https://checkout.razorpay.com/v1/checkout.js"></script> -->
        <!-- Add this line before your script -->
        <!-- <script src="https://checkout.razorpay.com/v1/checkout.js"></script> -->

        <script>
          
            let overallTotalPrice; // Declare a global variable to store the overall total price
            async function applyCoupon(totalPrice) {
                const messageContainer = document.getElementById('messageContainer');
                
                console.log('before getting value');
                const Couponcode = document.getElementById('couponCode').value;
                console.log("data of coupn",Couponcode);
                try {
                    const response = await fetch('/couponcheck', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify( {Couponcode} ),
                    })
                    console.log('value of the code is',Couponcode)
                   
                    const data = await response.json();
                    if (data.success) {
                            const discountValue = data.discount || 0;
                            const amountLimit = data.amount || 0;

                            // Check if the total amount is greater than the discount
                            if (totalPrice > discountValue) {
                                if (totalPrice >= amountLimit) {
                                    messageContainer.textContent = 'Coupon code is valid and applied.';
                                    setTimeout(() => {
                                        messageContainer.textContent = "";
                                    }, 5000);
                                    overallTotalPrice = totalPrice - discountValue; // Update the global variable
                                    document.getElementById('discountValue').textContent =` $${discountValue.toFixed(2)}`;
                                    document.getElementById('price').textContent = $${overallTotalPrice.toFixed(2)};
                                    document.getElementById('discountprice').textContent =${overallTotalPrice.toFixed(2)};
                                } else {
                                    messageContainer.textContent = 'You are not eligible for this coupon.';
                                    setTimeout(() => {
                                        messageContainer.textContent = "";
                                    }, 4000);
                                }
                            } else {
                                messageContainer.textContent = 'Your total is less than discount: ' ;
                                setTimeout(() => {
                                    messageContainer.textContent = "";
                                }, 4000);
                            }
                        } else {
                            messageContainer.textContent = data.message;
                            setTimeout(() => {
                                messageContainer.textContent = "";
                            }, 4000);
                            return;
                        }
                    }catch (error) {
                    messageContainer.textContent =` Error applying coupon: ${error.message}`;
                    console.error('Error applying coupon:', error);
                }
            }


            // razorpay
            let orderId;
            let price = document.getElementById('price')
            let orderprice = price.getAttribute('data-totalprice')
            console.log('price is ',orderprice);
            $(document).ready(function () {
                var settings = {
                    "url": "/razorpayment",
                    "method": "POST",
                    "timeout": 0,
                    "headers": {
                        "Content-Type": "application/json"
                    },
                    "data": JSON.stringify({
                        "amount":  overallTotalPrice * 100 
                    }),
                }; 
                console.log('price after the option',orderprice);
                //creates new orderId everytime
                $.ajax(settings).done(function (response) {
                    orderId = response.orderId;
                    $("#rzp-button1").show();
                });
            });
            // console.log("price is", orderprice);
            // console.log("price is", overallTotalPrice);
            document.getElementById('rzp-button1').onclick = function (e) {
                console.log('entrt herer',options);
                var options = {
                    "key": "rzp_test_Uvr7wbr090IExM",
                    "amount": overallTotalPrice * 100 , 
                    "currency": "INR",
                    "name": "Speculo",
                    "description": "Online Payment",
                    "image": "",
                    "order_id": orderId,
                    "handler": function (response) {
                        // Create a form dynamically
                        var form = document.createElement('form');
                        form.method = 'post';
                        form.action = '/checkedout';  // Replace with the URL you want to redirect to
                        // Create an input element to hold the payment ID
                        var paymentIdInput = document.createElement('input');
                        paymentIdInput.type = 'hidden';
                        paymentIdInput.name = 'razorpay_payment_id';
                        paymentIdInput.value = response.razorpay_payment_id;
                        // Add the input element to the form
                        form.appendChild(paymentIdInput);
                        // Add hidden input fields for payment mode and address details
                        var paymentModeInput = document.createElement('input');
                        paymentModeInput.type = 'hidden';
                        paymentModeInput.name = 'paymentMethod';
                        paymentModeInput.value = document.getElementById('paymentMethod').value; // Assumes the payment mode is selected through a dropdown
                        form.appendChild(paymentModeInput);
                        var selectedAddressInput = document.querySelector('input[name="selectedAddress"]:checked');
                        if (selectedAddressInput) {
                            var addressIdInput = document.createElement('input');
                            addressIdInput.type = 'hidden';
                            addressIdInput.name = 'selectedAddress';
                            addressIdInput.value = selectedAddressInput.value;
                            form.appendChild(addressIdInput);
                        }
                        // Append the form to the body
                        document.body.appendChild(form);      // Submit the form
                        form.submit();
                    }
                };
                var rzp1 = new Razorpay(options);
                rzp1.on('payment.failed', function (response) {
                    alert(response.error.code);
                    alert(response.error.description);
                    alert(response.error.source);
                    alert(response.error.step);
                    alert(response.error.reason);
                    alert(response.error.metadata.order_id);
                    alert(response.error.metadata.payment_id);
                });
                rzp1.open();
                e.preventDefault();
            }
        </script>

        <script>
           document.getElementById('wallet-button').addEventListener('click', async () => {
                try {
                    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value;
                    const paymentMode = document.getElementById('paymentMethod').value;
                    const coupencode=document.getElementById('couponCode').value;
                    const totalOverallPrice = parseFloat(document.getElementById('price').innerText.replace('₹', ''));
                    const walletAmount = parseFloat(document.getElementById('wallet-amount').innerText.replace('₹', ''));

                    if (totalOverallPrice > walletAmount) {
                        msgbox.textContent = `Wallet is not enough for this purchase: `;
                        setTimeout(() => {
                            messageContainer.textContent = "";
                        }, 4000);
                        return;
                    } else {
                        const response = await fetch('/placeOrderWithWallet', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                selectedAddress,
                                paymentMode,
                                totalOverallPrice,
                                coupencode
                            }),
                        });

                        if (response.redirected) {
                            window.location.href = response.url;
                        } else {
                            console.error('Server responded with an error:', response.status);
                            alert('An error occurred during the request');
                        }
                    }
                } catch (error) {
                    console.error('Error during fetch:', error);
                    alert('An error occurred during the request');
                }
            });
        </script>

       
    </div>
</body>
    


// userhome old product listing

<!-- 
<div class="container d-flex">
      <% if (productdb.length > 0) { %>
        <div class="row d-flex justify-content-center">
          <% productdb.slice(0, 6).forEach(function(val) { %>
            <!-- Product 1 -->
            <div class="col-md-4 mb-4">
              <div class="card product-card m-5">
                <img src="<%= val.img[0] %>" class="card-img-top img-fluid" alt="Product Image">
                <div class="card-body" style="max-height: 200px; overflow-y: auto;">
                  <h5 class="card-title"><%= val.productname %></h5>
                  <p class="card-text" style="height: 60px; overflow: hidden;"><%= val.description %></p>
                  <a href="/productdet/<%= val._id%>" class="btn btn-primary">View Details</a>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      <% } %>
    </div>
</div>  -->




<!-- coupon script -->
                    
                    <script>
                        let alreadyUsedCoupon = false;
                        let overallTotalPrice; // Declare a global variable to store the overall total price
                        async function applyCoupon(totalPrice) {
                            const messageContainer = document.getElementById('messageContainer');
                            if (alreadyUsedCoupon) {
                                messageContainer.textContent = 'Coupon already applied.';
                                return;
                            }
                            const couponcode = document.getElementsByName('couponcode')[0].value;
                            try {
                                const response = await fetch('/cart/usercoupon', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ couponcode }),
                                });
                                if (!response.ok) {
                                    messageContainer.textContent =' already used  coupon';
                                    setTimeout(() => {
                                        messageContainer.textContent = ""
                                    }, 3000);
                                    return;
                                }
                                const data = await response.json();
                                if (data.success) {
                                    if (data.success) {
                                        const discountValue = data.discount || 0;
                                        const amountLimit = data.amount || 0;

                                        // Check if the total amount is greater than the discount
                                        if (totalPrice > discountValue) {
                                            
                                            if (totalPrice >= amountLimit) {
                                                messageContainer.textContent = 'Coupon code is valid and not expired.';
                                                setTimeout(() => {
                                                    messageContainer.textContent = "";
                                                }, 3000);

                                                overallTotalPrice = totalPrice - discountValue; // Update the global variable
                                                document.getElementById('discountValue').textContent = discountValue.toFixed(2);
                                                document.getElementById('total-price2').textContent =` ₹${overallTotalPrice.toFixed(2)}`;
                                                document.getElementById('total-price3').textContent = `₹${overallTotalPrice.toFixed(2)}`;
                                                alreadyUsedCoupon = true;
                                            } else {
                                                messageContainer.textContent = 'Your purchase amount is not greater than the coupon purchase amount. You are not eligible for this coupon.';
                                                setTimeout(() => {
                                                    messageContainer.textContent = "";
                                                }, 4000);
                                            }
                                        } else {
                                            messageContainer.textContent = 'Coupon code is either expired or invalid: ' + data.message;
                                            setTimeout(() => {
                                                messageContainer.textContent = "";
                                            }, 4000);
                                        }
                                    } else {
                                        messageContainer.textContent = `Failed to apply coupon: `;
                                        setTimeout(() => {
                                            messageContainer.textContent = "";
                                        }, 4000);
                                        return;
                                    }
                                }
                            } catch (error) {
                                messageContainer.textContent =` Error applying coupon: ${error.message}`;
                                console.error('Error applying coupon:', error);
                            }
                        }
                    </script>