<%- include('header') -%>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

<style>
    body {
        background-color: #b3b3b3;
        background-image: url("/images/bg.jpg");
    }

    .container {
        margin-top: 50px;
    }
    .card {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: none;
    }
    .card-body {
        padding: 40px;
    }

    h1 {
        font-size: 2.5rem;
        margin-bottom: 30px;
        color: #333;
    }

    label {
        font-weight: 500;
    }

    input[type="text"],
    select,
    textarea {
        width: 100%;
        padding: 10px;
        margin-top: 6px;
        margin-bottom: 16px;
        display: inline-block;
        border: 1px solid #ccc;
        box-sizing: border-box;
        border-radius: 4px;
    }

    input[type="file"] {
        margin-top: 10px;
    }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    .btn-primary,
    .btn-success,
    .btn-danger {
        color: #fff;
        padding: 10px 20px;
        font-size: 1rem;
    }
    .image-container-row {
        white-space: nowrap;
        overflow-x: auto; /* Add horizontal scrollbar if the content overflows */
    }
    .image-container {
     width: 240px;
    height: 170px;
    display: inline-block;
    margin-right: 10px;
    border: 1px solid red; /* Add a border for debugging */
}
    
    .image-container img {
        max-width: 100%; /* Ensure images don't exceed the container width */
        max-height: 100%; /* Ensure images don't exceed the container height */
    }
    .save-button,
    .remove-button {
        display: block;
        width: 100%; /* Make buttons take the full width of the container */
        margin-top: 5px;
    }
</style>

<div class="container">
    <div class="card">
        <div class="card-body">
            <div class="text-center">
                
                <div class="text-center">
                    <a href="/productmanage" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> 
                    </a>
                    <!-- <button type="submit" class="btn btn-success">Add Product</button> -->
                </div>
            </div>

            <h1 class="mb-4 text-center"></h1>

            <form action="/productmanage/addedproduct" method="POST" enctype="multipart/form-data"
                onsubmit="submitForm(event)">
                <div class="form-group">
                            <label for="productName">Product Name:</label>
                            <input type="text" class="form-control" id="productName" name="productname" required>
                        </div>

                        <div class="form-group">
                            <label for="category">Category:</label>
                            <select name="category" class="form-control" id="Malik" required>
                                <% if (Category.length > 0) { %>
                                    <% for (let i = 0; i < Category.length; i++) { %>
                                        <option value="<%= Category[i]._id %>"><%= Category[i].category %></option>
                                    <% } %>
                                <% } else { %>
                                    <option value="" disabled>No items available</option>
                                <% } %>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="price">Price:</label>
                            <input type="text" class="form-control" id="price" name="price" required>
                        </div>

                        <div class="form-group">
                            <label for="rating">Rating:</label>
                            <input type="text" class="form-control" id="rating" name="rating" required>
                        </div>

                        <div class="form-group">
                            <label for="model">Model:</label>
                            <input type="text" class="form-control" id="model" name="model" required>
                        </div>

                        <div class="form-group">
                            <label for="stock">Stock</label>
                            <input type="text" class="form-control" id="stock" name="stock" required>
                        </div>

                        <div class="form-group">
                            <label for="description">Description:</label>
                            <input type="text" class="form-control" id="description" name="description" required>
                        </div>
                        <div class="form-group">
                            <input type="file" class="form-control-file" id="image" name="img" accept="image/*" multiple>
                            <div id="image-container" class="mt-3"></div>
                            <br>  <span id="validationMessage" style="color: red;"></span>
                        </div>
                        <br>
                        <br>
                        <br>
                        <button type="submit" class="btn btn-success">Add Product</button>
                    </form>
                </div>
            </div>
        </div>


<script>
    const imageContainer = document.getElementById('image-container');
    let croppers = [];
    let croppedImagesData = []; // Array to store cropped image data
    let isSaveClicked = false; // Flag to track if the Save button is clicked

    document.getElementById('image').addEventListener('change', (event) => {
        const files = event.target.files;

        for (const file of files) {
            const reader = new FileReader();

            reader.onload = (event) => {
                const image = new Image();
                image.src = event.target.result;

                image.onload = () => {
                    const containerDiv = document.createElement('div');
                    containerDiv.className = 'image-container';

                    const imageElement = document.createElement('img');
                    imageElement.src = image.src;
                    containerDiv.appendChild(imageElement);

                    // Set a fixed height for the container
                    containerDiv.style.height = '150px';

                    // Create a new Cropper for each image without a fixed aspect ratio
                    const cropper = new Cropper(imageElement, {
                        aspectRatio: NaN, // Allow freeform cropping
                        viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
                    });

                    // Create a "Save" button for each image
                    const saveButton = document.createElement('button');
                    saveButton.className = 'btn btn-success save-button';
                    saveButton.textContent = 'Save';
                    saveButton.addEventListener('click', () => {
                        // Get the cropped image data for the specific cropper
                        const croppedCanvas = cropper.getCroppedCanvas();
                        const croppedImageData = croppedCanvas.toDataURL('image/jpeg');

                        // Store cropped image data in the array
                        croppedImagesData.push(croppedImageData);

                        // Optionally, you can remove the "Save" button after saving
                        containerDiv.removeChild(saveButton);

                        // Set the flag to indicate that Save button is clicked
                        isSaveClicked = true;
                    });

                    // Create a "Remove" button for each image
                    const removeButton = document.createElement('button');
                    removeButton.className = 'btn btn-danger remove-button';
                    removeButton.textContent = 'Remove';
                    removeButton.addEventListener('click', () => {
                        // Remove the corresponding image and cropper
                        const index = croppers.indexOf(cropper);
                        if (index !== -1) {
                            croppers.splice(index, 1);
                            croppedImagesData.splice(index, 1);
                        }
                        containerDiv.remove();

                        // Reset the flag if there are no images left
                        if (croppers.length === 0) {
                            isSaveClicked = false;
                        }
                    });

                    containerDiv.appendChild(saveButton);
                    containerDiv.appendChild(removeButton);

                    imageContainer.appendChild(containerDiv);
                    croppers.push(cropper);
                };
            };

            reader.readAsDataURL(file);
        }
    });

    // Handle form submission (for adding product)
    function submitForm(event) {
        // Prevent form submission if Save button is not clicked
        if (!isSaveClicked) {
            event.preventDefault();
            // Show validation message
            document.getElementById('validationMessage').textContent = 'Please save the image first.';
        } else {
            // Add the cropped image data to the form data
            croppedImagesData.forEach((croppedImageData, index) => {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = `croppedImages[${index}]`;
                hiddenInput.value = croppedImageData;
                document.querySelector('form').appendChild(hiddenInput);
            });

            // Optionally, you can also reset the croppers and image containers
            resetCroppersAndContainers();
        }
    }

    // Function to reset croppers and containers
    function resetCroppersAndContainers() {
        // Reset the croppers array
        croppers = [];

        // Remove all child elements from the imageContainer
        while (imageContainer.firstChild) {
            imageContainer.removeChild(imageContainer.firstChild);
        }

        // Clear the file input
        const fileInput = document.getElementById('image');
        fileInput.value = '';

        // Clear the cropped image data array
        croppedImagesData = [];

        // Reset the Save button click flag
        isSaveClicked = false;

        // Clear the validation message
        document.getElementById('validationMessage').textContent = '';
    }


    document.getElementById('priceInput').addEventListener('input', function () {
        // Get the current value of the price input
        const priceValue = parseFloat(this.value);

        // Check if the value is less than 1
        if (isNaN(priceValue) || priceValue < 1) {
            // Display an error message
            document.getElementById('priceValidationMessage').textContent = 'Price must be greater than or equal to 1';
        } else {
            // Clear the error message if the value is valid
            document.getElementById('priceValidationMessage').textContent = '';
        }
    });
</script>

<%- include('footer') -%>